;;;;;;;;;;;;;;;;;;;;
;
;    copyright: xuzhu
;	 date:2016/11/21
;	 student ID: 2014211285
;	 class ID: 2014211306
;	 mail: xuzhu1996@hotmail.com
;
;;;;;;;;;;;;;;;;;;;;

STUDENT STRUC
	ID db 12 dup(?)
	NM db 12 dup(?)
	CLASSID db 12 dup(?)
	GRADE_STRING db 4 dup(?)
	GRADE dw ?
STUDENT ENDS


DATA SEGMENT
	TABLE dw CASE0, CASE1, CASE2, CASE3, CASE4, DEFAULT
	OUTPUT db 'COMMAND:', 0DH, 0AH, '1 -- INPUT AN INFORMATION OF A STUDENT', 0DH, 0AH, '2 -- OUTPUT INFORMATION(GRADE)', 0DH, 0AH, '3 -- AVERAGE GRADE', 0DH, 0AH, '4 -- STATICTIC', 0DH, 0AH, '0 -- EXIT:', '$'
	MSG1 db 'Please input student ID:', '$'
	MSG2 db 'Please input student name:', '$'
	MSG3 db 'Please input class ID:', '$'
	MSG4 db 'Please input grade:', '$'
	MSG5 db 'STUDENT ID:       ', '$'
	MSG6 db 'STUDENT NAME:     ', '$'
	MSG7 db 'CLASS ID:         ', '$'
	MSG8 db 'GRADE:            ', '$'
	MSG9 db 'AVERAGE GRADE:    ', '$'
	MSG10 db 'LESS THAN 60:    ', '$'
	MSG11 db '60<=GRADE<70:    ', '$'
	MSG12 db '70<=GRADE<80:    ', '$'
	MSG13 db '80<=GRADE<90:    ', '$'
	MSG14 db '90<=GRADE:       ', '$'
	ERROR_INPUT db 'Your input is a error, reinput!!!', '$'
	
	parameter dw ?
	parameter_2 dw ?
	STUDENT_ARRAY STUDENT 100 dup(<>)
	STUDENT_ORDER_ARRAY_ID dw 100 dup(?)
	STUDENT_NUM db 0
	TOTAL_GRADE dw 0
	LESS_SIX dw 0
	SIX_TO_SEVEN dw 0
	SEVEN_TO_EIGHT dw 0
	EIGHT_TO_NINE dw 0
	GREATER_NINE dw 0
	CHOICE db 0
	CHOICE_LEN db 0
	BUF db	20
		db  ?
		db	20 dup(?)
	AVERAGE_GRADE_STR db 20 dup(?)
DATA ENDS


STACK SEGMENT STACK
	S dw 100 dup(?)
STACK ENDS

CODE SEGMENT
	ASSUME CS:CODE, DS:DATA		
START:
	MOV AX, DATA
	MOV DS, AX
	
L2:	LEA DX, OUTPUT
	CALL PRINT_COMMAND
	CALL INPUT_CHOICE
	CALL PRINT_NEWLINE
		MOV BH, 0
		MOV BL, CHOICE
		SUB BL, '0'
		CMP BL, 5
		JL CASE0TO5
		MOV BL, 5
	
	CASE0TO5:
		SHL BX, 1
		
		JMP TABLE[BX]
	CASE0:
		MOV AX, 4C00H
		INT 21H
	CASE1:
		MOV AL, TYPE STUDENT
		MOV BL, STUDENT_NUM
		MUL BL
		MOV BX, AX
		
		LEA DX, MSG1
		CALL PRINT_COMMAND
		CALL INPUT_STRING
		LEA DI, STUDENT_ARRAY[BX].ID
		CALL COPY_STRING
		CALL PRINT_NEWLINE
		
		LEA DX, MSG2
		CALL PRINT_COMMAND
		CALL INPUT_STRING
		LEA DI, STUDENT_ARRAY[BX].NM
		CALL COPY_STRING
		CALL PRINT_NEWLINE
		
		LEA DX, MSG3
		CALL PRINT_COMMAND
		CALL INPUT_STRING
		LEA DI, STUDENT_ARRAY[BX].CLASSID
		CALL COPY_STRING
		CALL PRINT_NEWLINE
		
		LEA DX, MSG4
		CALL PRINT_COMMAND
		CALL INPUT_STRING
		LEA DI, STUDENT_ARRAY[BX].GRADE_STRING
		CALL COPY_STRING
		LEA BX, STUDENT_ARRAY[BX].GRADE_STRING
		CALL DEAL_GRADE_STRING
		MOV WORD PTR STUDENT_ARRAY[BX].GRADE, CX
		CALL PRINT_NEWLINE
		
		INC BYTE PTR STUDENT_NUM
		
		MOV AX, WORD PTR TOTAL_GRADE
		ADD AX, CX
		MOV WORD PTR TOTAL_GRADE, AX		
		
		CMP CX, 0258H
		JB LESS_THAN_SIXTY
		CMP CX, 02BCH
		JB SIXTY_TO_SEVENTY
		CMP CX, 0320H
		JB SEVENTY_TO_EIGHTY
		CMP CX, 384H
		JB EIGHTY_TO_NINETY
		INC GREATER_NINE
		JMP L2
	LESS_THAN_SIXTY:
		INC LESS_SIX
		JMP L2
	SIXTY_TO_SEVENTY:
		INC SIX_TO_SEVEN
		JMP L2
	SEVENTY_TO_EIGHTY:
		INC SEVEN_TO_EIGHT
		JMP L2
	EIGHTY_TO_NINETY:
		INC EIGHT_TO_NINE
		JMP L2
	GOTOL2:
		JMP L2
		
	CASE2:
		CALL ORDER_PRE_DEAL
		;CALL ORDER_GRADE_DEAL
		CALL ORDER_TEST
		MOV CL, STUDENT_NUM
		MOV BX, 0
	CASE2_L1:
		CMP CL, 0
		JE GOTOL2
		MOV SI, STUDENT_ORDER_ARRAY_ID[BX]
		LEA DX, MSG5
		CALL PRINT_COMMAND
		LEA DX, [SI].ID
		CALL PRINT_COMMAND
		CALL PRINT_NEWLINE
		LEA DX, MSG6
		CALL PRINT_COMMAND
		LEA DX, [SI].NM
		CALL PRINT_COMMAND
		CALL PRINT_NEWLINE
		LEA DX, MSG7
		CALL PRINT_COMMAND
		LEA DX, [SI].CLASSID
		CALL PRINT_COMMAND
		CALL PRINT_NEWLINE
		LEA DX, MSG8
		CALL PRINT_COMMAND
		LEA DX, [SI].GRADE_STRING
		CALL PRINT_COMMAND
		CALL PRINT_NEWLINE
		CALL PRINT_NEWLINE
		ADD BX, 2
		DEC CL
		JMP CASE2_L1

	CASE3:
		LEA DX, MSG9
		CALL PRINT_COMMAND
		CALL COMPUTE_AVERAGE_GRADE
		LEA DX, BUF+2
		CALL PRINT_COMMAND
		
		MOV DL, '.'
		MOV AH, 2
		INT 21H
		
		MOV DL, BYTE PTR parameter
		ADD DL, '0'
		MOV AH, 2
		INT 21H
		CALL PRINT_NEWLINE
		CALL PRINT_NEWLINE
		
		JMP L2
	CASE4:
		LEA DX, MSG10
		CALL PRINT_COMMAND
		MOV DX, WORD PTR LESS_SIX
		MOV parameter, DX
		CALL INTEGER2STR
		LEA DX, BUF+2
		CALL PRINT_COMMAND
		CALL PRINT_NEWLINE
		
		LEA DX, MSG11
		CALL PRINT_COMMAND
		MOV DX, WORD PTR SIX_TO_SEVEN
		MOV parameter, DX
		CALL INTEGER2STR
		LEA DX, BUF+2
		CALL PRINT_COMMAND
		CALL PRINT_NEWLINE
		
		LEA DX, MSG12
		CALL PRINT_COMMAND
		MOV DX, WORD PTR SEVEN_TO_EIGHT
		MOV parameter, DX
		CALL INTEGER2STR
		LEA DX, BUF+2
		CALL PRINT_COMMAND
		CALL PRINT_NEWLINE
		
		LEA DX, MSG13
		CALL PRINT_COMMAND
		MOV DX, WORD PTR EIGHT_TO_NINE
		MOV parameter, DX
		CALL INTEGER2STR
		LEA DX, BUF+2
		CALL PRINT_COMMAND
		CALL PRINT_NEWLINE
		
		LEA DX, MSG14
		CALL PRINT_COMMAND
		MOV DX, WORD PTR GREATER_NINE
		MOV parameter, DX
		CALL INTEGER2STR
		LEA DX, BUF+2
		CALL PRINT_COMMAND
		CALL PRINT_NEWLINE
		JMP L2
	DEFAULT:
		LEA DX, ERROR_INPUT
		CALL PRINT_COMMAND
		CALL PRINT_NEWLINE
		JMP L2
	
	MOV AH, 4CH
	INT 21H

PRINT_COMMAND PROC NEAR
		PUSH AX
		MOV AH, 9
		INT 21H
		POP AX
		RET 
PRINT_COMMAND ENDP	

INPUT_CHOICE PROC NEAR
		PUSH AX
		MOV AH, 1
		INT 21H
		MOV CHOICE, AL
		POP AX
		RET
INPUT_CHOICE ENDP

PRINT_NEWLINE PROC NEAR
		PUSH DX
		PUSH AX
		MOV DL, 0AH
		MOV AH, 2
		INT 21H
		POP AX
		POP DX
		RET
PRINT_NEWLINE ENDP

INPUT_STRING PROC
		PUSH DX
		PUSH AX
		PUSH BX
		LEA DX, BUF
		MOV AH, 0AH
		INT 21H
		
		MOV BL, BUF+1
		MOV BH, 0
		MOV BYTE PTR BUF[BX+2], '$'
		
		POP BX
		POP AX
		POP DX
		RET
INPUT_STRING ENDP

COPY_STRING PROC
		PUSH AX
		PUSH SI
		PUSH CX
		
		MOV CL, BUF+1
		MOV CH, 0
		INC CX
		LEA SI, BUF+2
		
	COPY_STRING_L1:	
		MOV AL, BYTE PTR [SI]
		MOV BYTE PTR [DI], AL
		ADD SI, 1
		ADD DI, 1
		LOOP COPY_STRING_L1
		
		POP CX
		POP SI
		POP AX
		RET
COPY_STRING ENDP

DEAL_GRADE_STRING PROC NEAR
		PUSH DX
		PUSH AX
		PUSH BX
		
		MOV CX, 0
	DEAL_L1:	
		MOV DX, CX
		SHL CX, 1
		SHL CX, 1
		SHL CX, 1
		ADD CX, DX
		ADD CX, DX
		MOV AL, BYTE PTR [BX]
		SUB AL, '0'
		CBW
		ADD CX, AX
	DEAL_L2:	
		INC BX
		CMP BYTE PTR [BX], '.'
		JE DEAL_L2
		CMP BYTE PTR [BX], '$'
		JE DEAL_DONE
		JMP DEAL_L1
	
	DEAL_DONE:		
		POP BX
		POP AX
		POP DX	
		RET
DEAL_GRADE_STRING ENDP

INTEGER2STR PROC NEAR
		PUSH SI
		PUSH AX
		PUSH BX
		PUSH CX
		
		MOV SI, 0
		MOV AX, parameter
		MOV BL, 10
	INTEGER2STR_L2:
		DIV BL
		CMP AL, 0
		JE INTEGER2STR_L1
		MOV CL, AL
		MOV AL, AH
		CBW
		ADD CL, '0'
		MOV BUF[2+SI], CL
		INC SI
		JMP INTEGER2STR_L2
	INTEGER2STR_L1:
		MOV CL, AH
		ADD CL, '0'
		MOV BUF[2+SI], CL
		
		MOV CL, '$'
		MOV BUF[3+SI], CL
		
		POP CX
		POP BX
		POP AX
		POP SI
		RET
INTEGER2STR ENDP

INT2STR PROC NEAR
		PUSH AX
		PUSH BX
		PUSH CX
		PUSH DX
		PUSH SI
		PUSH DI
		
		MOV DI, 0
		MOV SI, 0
		MOV AX, parameter
		MOV DX, 0
		MOV BX, 10
	INT2STR_L1:
		DIV BX
		PUSH DX
		INC DI
		MOV DX, 0
		CMP AX, 10
		JAE INT2STR_L1
		PUSH AX
		INC DI
	
	INT2STR_L2:
		POP CX
		ADD CL, '0'
		MOV BUF[2+SI], CL
		INC SI
		DEC DI
		CMP DI, 0
		JNE INT2STR_L2
		
		MOV CL, '$'
		MOV BUF[2+SI], CL
		
		POP DI
		POP SI
		POP DX
		POP CX
		POP BX
		POP AX
		RET
INT2STR ENDP

COMPUTE_AVERAGE_GRADE PROC NEAR
		PUSH AX
		PUSH BX
		PUSH CX
		PUSH DX
		MOV AX, TOTAL_GRADE
		MOV DX, 0
		MOV CL, STUDENT_NUM
		MOV CH, 0
		DIV CX
		MOV CX, 10
		MOV DX, 0
		DIV CX
		MOV WORD PTR parameter, AX
		CALL INT2STR		
		MOV BYTE PTR parameter, DL
	CAG_DONE:
		POP DX
		POP CX
		POP BX
		POP AX
		RET
COMPUTE_AVERAGE_GRADE ENDP

ORDER_PRE_DEAL PROC NEAR
		PUSH AX
		PUSH BX
		PUSH CX
		PUSH DX
		PUSH SI
		MOV CL, 0
		MOV SI, 0
	ORDER_PRE_DEAL_L1:
		MOV AL, TYPE STUDENT
		CMP CL, STUDENT_NUM
		JE ORDER_PRE_DEAL_DONE
		MUL CL
		MOV BX, AX
		LEA DX, STUDENT_ARRAY[BX]
		MOV STUDENT_ORDER_ARRAY_ID[SI], DX
		INC CL
		ADD SI, 2
		JMP ORDER_PRE_DEAL_L1
	
	ORDER_PRE_DEAL_DONE:
		POP SI
		POP DX
		POP CX
		POP BX
		POP AX
		RET
ORDER_PRE_DEAL ENDP

ORDER_GRADE_DEAL PROC NEAR
		PUSH AX
		PUSH BX
		PUSH CX
		PUSH DX
		PUSH SI
		PUSH DI
		
		MOV CL, STUDENT_NUM
		DEC CL
	ORDER_GRADE_DEAL_L1:
		PUSH CX
		MOV BX, 0 
	ORDER_GRADE_DEAL_L2:
		MOV SI, STUDENT_ORDER_ARRAY_ID[BX]
		MOV AX, [SI].GRADE
		MOV DI, STUDENT_ORDER_ARRAY_ID[BX+2]
		MOV DX, (DS:[DI]).GRADE
		CMP AX, DX
		JGE ORDER_GRADE_DEAL_CONT1
		MOV STUDENT_ORDER_ARRAY_ID[BX], DI
		MOV STUDENT_ORDER_ARRAY_ID[BX+2], SI
	ORDER_GRADE_DEAL_CONT1:
		ADD BX, 2
		DEC CL
		CMP CL, 0
		JNE ORDER_GRADE_DEAL_L2
		POP CX
		DEC CL
		CMP CL, 0
		JNE ORDER_GRADE_DEAL_L1
		
		POP DI
		POP SI
		POP DX
		POP CX
		POP BX
		POP AX
		RET
ORDER_GRADE_DEAL ENDP

CODE ENDS
	END START
